
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wcydykuwzvlfzhuiuzts.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndjeWR5a3V3enZsZnpodWl1enRzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5MjM3MDksImV4cCI6MjA1NTQ5OTcwOX0.IZV9HH4d8q-FviiGB7Qeb3G0_l0qPKpfFe8BdBg1dcI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper functions for auth
export const getCurrentUser = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  return user;
};

export const getUserProfile = async (userId: string) => {
  // We need to specify the table name using type annotations to avoid TS errors
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', userId)
    .single();
  
  if (error) {
    console.error('Error fetching user profile:', error);
    return null;
  }
  
  return data;
};

// Helper functions for data operations - updated to use generic types for better type safety
export const fetchData = async <T>(table: string) => {
  try {
    // Using any here because we need to bypass TypeScript's type checking
    // for dynamic table names
    const query = (supabase.from(table as any) as any).select('*');
    const { data, error } = await query;
    
    if (error) {
      console.error(`Error fetching data from ${table}:`, error);
      return [] as T[];
    }
    
    return (data || []) as T[];
  } catch (error) {
    console.error(`Error in fetchData for ${table}:`, error);
    return [] as T[];
  }
};

export const insertData = async <T>(table: string, data: any) => {
  try {
    // Using any here because we need to bypass TypeScript's type checking
    // for dynamic table names
    const { data: result, error } = await (supabase.from(table as any) as any)
      .insert(data)
      .select();
    
    if (error) {
      console.error(`Error inserting data into ${table}:`, error);
      throw error;
    }
    
    return result as T[];
  } catch (error) {
    console.error(`Error in insertData for ${table}:`, error);
    throw error;
  }
};

export const updateData = async <T>(table: string, id: string, data: any) => {
  try {
    // Using any here because we need to bypass TypeScript's type checking
    // for dynamic table names
    const { data: result, error } = await (supabase.from(table as any) as any)
      .update(data)
      .eq('id', id)
      .select();
    
    if (error) {
      console.error(`Error updating data in ${table}:`, error);
      throw error;
    }
    
    return result as T[];
  } catch (error) {
    console.error(`Error in updateData for ${table}:`, error);
    throw error;
  }
};

export const deleteData = async (table: string, id: string) => {
  try {
    // Using any here because we need to bypass TypeScript's type checking
    // for dynamic table names
    const { error } = await (supabase.from(table as any) as any)
      .delete()
      .eq('id', id);
    
    if (error) {
      console.error(`Error deleting data from ${table}:`, error);
      throw error;
    }
    
    return true;
  } catch (error) {
    console.error(`Error in deleteData for ${table}:`, error);
    throw error;
  }
};

// Special helper for medical records to ensure proper data formatting
export const createMedicalRecord = async (recordData: any) => {
  try {
    // Ensure array fields are properly set as arrays
    const formattedData = {
      ...recordData,
      // Convert string values to arrays where needed
      nutricao: recordData.nutricao ? (Array.isArray(recordData.nutricao) ? recordData.nutricao : [recordData.nutricao]) : [],
      eliminacao_urinaria: recordData.eliminacao_urinaria ? (Array.isArray(recordData.eliminacao_urinaria) ? recordData.eliminacao_urinaria : [recordData.eliminacao_urinaria]) : [],
      eliminacao_intestinal: recordData.eliminacao_intestinal ? (Array.isArray(recordData.eliminacao_intestinal) ? recordData.eliminacao_intestinal : [recordData.eliminacao_intestinal]) : [],
    };

    // Log the formatted data to help with debugging
    console.log('Formatted record data:', formattedData);

    const { data, error } = await supabase
      .from('prontuario')
      .insert([formattedData])
      .select();

    if (error) {
      console.error('Error creating medical record:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error in createMedicalRecord:', error);
    throw error;
  }
};
